<?php
// @file: armonic_php_defined_instruct.pinc
// @author: C.A.D. BONDJE DOUE
// @description: 
// @copyright: igkdev Â© 2019
// @license: Microsoft MIT License. For more information read license.txt
// @company: IGKDEV
// @mail: bondje.doue@igkdev.com
// @url: https://www.igkdev.com

defined("IGK_FRAMEWORK") || die("REQUIRE FRAMEWORK - No direct access allowed");

array_unshift($tab, (object)array(
        'name'=>'definedReadExpression',
        'pattern'=>"#(^|\\s+)(?P<operator>defined)(\\s*\()?#i",
        'mode'=>function($m){
            $r=(($m->context == 'global') && ($m->mode == 0) && ($m->toread == 0));
            return $r;
        },
        'callback'=>function(& $t, $start, & $offset, $m){
            $totreat=igk_createobj();
            $totreat->def=preg_replace("/\\s+/", "", $m->data[0][0]);
            $totreat->type=$m->data["operator"][0];
            $totreat->starTreat=function(){igk_wln_e("start treat **************************");
            };
            $totreat->endTreat=function($s, $options, $toread){$toread->def .= trim($s);
                $fi=1;
                if(!isset($options->FileInstructFlag)){
                    foreach($options->definitions as $k=>$v){
                        if($k == "FileInstruct")
                            continue;
                        if(count($v) > 0){
                            $fi=0;
                            break;
                        }
                    }
                }
                else{
                    $fi=0;
                }
                igk_treat_restore_context($options);
                if($fi){
                    $options->definitions->FileInstruct[]=$toread->def;
                }
                else{
                    $options->FileInstructFlag=1;
                    $options->DataLFFlag=1;
                    igk_treat_append($options, $toread->def, 0);
                }
            };
            $totreat->handleChar=function(& $t, $start, & $offset, $ch, $m){
                switch($ch){
                    case ";":
                    igk_wln_e("dinf:", __FILE__.":".__LINE__);
                    break;
                }
            };
            $before=substr($t, 0, $start);
            igk_treat_set_context($m->options, $m->matcher->name, $m->options->mode, [ "toread", "mode", "data", "bracketDepth", "conditionDepth", "offsetDepth", "DataLFFlag"]);
            $level=$m->options->offsetDepth + $m->options->bracketDepth;
            $m->options->offsetDepth=$level;
            $m->options->bracketDepth=0;
            $m->options->mode=1;
            $m->options->data="";
            $m->options->DataLFFlag=0;
            $m->options->conditionDepth=0;
            $m->options->openHook=0;
            if(!empty($before)){
                igk_treat_append($m->options, $before, 0);
            }
            $t=substr($t, $start + strlen($m->data[0][0]));
            $offset=0;
            $m->options->context="defineOperationContext";
            if($totreat->def[strlen($totreat->def)-1] == '('){
                $m->options->conditionDepth=1;
            }
            else{}
            $m->options->DataLF=0;
            $m->options->toread=$totreat;
            return $t;
        }
    ));